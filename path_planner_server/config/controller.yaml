controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 10.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] 
    controller_plugins: ["FollowPath"]
    # cmd_vel_topic: diffbot_base_controller/cmd_vel_unstamped

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.4
      movement_time_allowance: 10.0
    # Goal checker parameters
    general_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      stateful: True # Does not check goal
      xy_goal_tolerance: 0.30
      yaw_goal_tolerance: 0.25
    # DWB parameters
    FollowPath:
      # https://navigation.ros.org/configuration/packages/configuring-rotation-shim-controller.html#configuring-rotation-shim

      #plugin: "dwb_core::DWBLocalPlanner"
      plugin: "nav2_rotation_shim_controller::RotationShimController"
      primary_controller: "dwb_core::DWBLocalPlanner"
      angular_dist_threshold: 0.785
      forward_sampling_distance: 0.5
      rotate_to_heading_angular_vel: 1.5
      max_angular_accel: 3.2
      simulate_ahead_time: 1.0

      debug_trajectory_details: True
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.12
      max_vel_y: 0.0
      max_vel_theta: 1.0
      min_speed_xy: 0.0
      max_speed_xy: 0.25
      min_speed_theta: 0.0
      acc_lim_x: 2.5
      acc_lim_y: 0.0
      acc_lim_theta: 3.2
      decel_lim_x: -2.5
      decel_lim_y: 0.0
      decel_lim_theta: -3.2
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      sim_time: 1.7
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.30
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "ObstacleFootprint", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.12
      PathAlign.scale: 32.0  # global path
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

      # ObstacleFootprint
      # BaseObstacle
      
      #critics: ["RotateToGoal", "Oscillation", "ObstacleFootprint", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      # ObstacleFootprint.scale: 0.02 # How much to avoid from obstacles
      # PathAlign.scale: 0.0
      # PathAlign.forward_point_distance: 0.1
      # GoalAlign.scale: 0.0
      # GoalAlign.forward_point_distance: 0.1
      # PathDist.scale: 32.0 # How strong to stay on global path
      # GoalDist.scale: 24.0 # How strong to reach local goal
      # RotateToGoal.scale: 32.0
      # RotateToGoal.xy_goal_tolerance: 0.15
      # RotateToGoal.slowing_factor: 5.0
      # RotateToGoal.lookahead_time: -1.0


local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: turtlebot_5_odom
      robot_base_frame: turtlebot_5_base_footprint
      use_sim_time: False
      static_map: false 
      rolling_window: true
      width: 2
      height: 2
      resolution: 0.025
      #robot_radius: 0.3
      footprint: "[[0.27, 0.27], [-0.27, 0.27], [-0.27, -0.27], [0.27, -0.27]]"
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 6.0
        inflation_radius: 0.75
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: False
        # origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /turtlebot_5/scan
          #sensor_frame: vikings_bot_1/lidar_link
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.9
          obstacle_min_range: 0.50
      always_send_full_costmap: True
        